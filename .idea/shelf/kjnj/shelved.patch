Index: src/App.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/App.tsx b/src/App.tsx
new file mode 100644
--- /dev/null	(date 1748636500448)
+++ b/src/App.tsx	(date 1748636500448)
@@ -0,0 +1,85 @@
+import React, { useState, useEffect } from 'react';
+import { DeviceProvider } from './contexts/DeviceContext';
+import { SignatureProvider } from './contexts/SignatureContext';
+import Layout from './components/Layout/Layout';
+import IdleScreen from './components/IdleScreen/IdleScreen';
+import PairingScreen from './components/PairingScreen/PairingScreen';
+import SignaturePad from './components/SignaturePad/SignaturePad';
+import { useDevice } from './hooks/useDevice';
+import { useWebSocket } from './hooks/useWebSocket';
+import { useWakeLock } from './hooks/useWakeLock';
+import { usePWA } from './hooks/usePWA';
+import { SignatureRequest } from './types/signature.types';
+import './styles/globals.css';
+import './styles/variables.css';
+import './styles/animations.css';
+
+function AppContent() {
+    const { deviceConfig, deviceStatus } = useDevice();
+    const { on } = useWebSocket();
+    const [signatureRequest, setSignatureRequest] = useState<SignatureRequest | null>(null);
+    const { isInstallable, install } = usePWA();
+
+    useWakeLock();
+
+    useEffect(() => {
+        const unsubscribe = on('signature_request', (data: SignatureRequest) => {
+            setSignatureRequest(data);
+
+            // Vibrate to notify
+            if ('vibrate' in navigator) {
+                navigator.vibrate([200, 100, 200]);
+            }
+
+            // Play notification sound
+            const audio = new Audio('/sounds/notification.mp3');
+            audio.play().catch(console.error);
+        });
+
+        return unsubscribe;
+    }, [on]);
+
+    // Not paired yet
+    if (!deviceConfig) {
+        return (
+            <Layout>
+                <PairingScreen />
+            </Layout>
+        );
+    }
+
+    // Has active signature request
+    if (signatureRequest) {
+        return (
+            <Layout>
+                <SignaturePad
+                    request={signatureRequest}
+                    onComplete={() => setSignatureRequest(null)}
+                    onCancel={() => setSignatureRequest(null)}
+                />
+            </Layout>
+        );
+    }
+
+    // Idle state
+    return (
+        <Layout>
+            <IdleScreen
+                isInstallable={isInstallable}
+                onInstall={install}
+            />
+        </Layout>
+    );
+}
+
+function App() {
+    return (
+        <DeviceProvider>
+            <SignatureProvider>
+                <AppContent />
+            </SignatureProvider>
+        </DeviceProvider>
+    );
+}
+
+export default App;
\ No newline at end of file
Index: src/config/environment.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/config/environment.ts b/src/config/environment.ts
new file mode 100644
--- /dev/null	(date 1748636384805)
+++ b/src/config/environment.ts	(date 1748636384805)
@@ -0,0 +1,10 @@
+const getEnvVar = (key: string, defaultValue = ''): string => {
+    return process.env[key] || defaultValue;
+};
+
+export const ENV = {
+    API_BASE_URL: getEnvVar('REACT_APP_API_BASE_URL', 'https://api.crm.com'),
+    WS_BASE_URL: getEnvVar('REACT_APP_WS_BASE_URL', 'wss://api.crm.com'),
+    ENVIRONMENT: getEnvVar('REACT_APP_ENVIRONMENT', 'production'),
+    DEBUG_MODE: getEnvVar('REACT_APP_DEBUG_MODE', 'false') === 'true'
+};
\ No newline at end of file
Index: src/config/constants.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/config/constants.ts b/src/config/constants.ts
new file mode 100644
--- /dev/null	(date 1748636303972)
+++ b/src/config/constants.ts	(date 1748636303972)
@@ -0,0 +1,24 @@
+export const APP_CONFIG = {
+    APP_NAME: 'CRM Signature Pad',
+    APP_VERSION: '1.0.0',
+
+    // WebSocket
+    WS_RECONNECT_INTERVAL: 3000,
+    WS_MAX_RECONNECT_ATTEMPTS: 10,
+    WS_HEARTBEAT_INTERVAL: 30000,
+
+    // Signature
+    SIGNATURE_TIMEOUT: 120000, // 2 minutes
+    SIGNATURE_MIN_POINTS: 10,
+
+    // Storage keys
+    STORAGE_KEYS: {
+        DEVICE_CONFIG: 'device_config',
+        TENANT_BRANDING: 'tenant_branding',
+        LAST_SYNC: 'last_sync'
+    },
+
+    // API
+    API_TIMEOUT: 10000,
+    API_RETRY_ATTEMPTS: 3
+};
\ No newline at end of file
Index: src/api/client.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/api/client.ts b/src/api/client.ts
new file mode 100644
--- /dev/null	(date 1748636384802)
+++ b/src/api/client.ts	(date 1748636384802)
@@ -0,0 +1,93 @@
+import { ApiResponse } from '../types/api.types';
+import { ENV } from '../config/environment';
+import { APP_CONFIG } from '../config/constants';
+import { StorageService } from '../services/storage.service';
+
+class ApiClient {
+    private baseURL: string;
+    private timeout: number;
+    private storage: StorageService;
+
+    constructor() {
+        this.baseURL = ENV.API_BASE_URL;
+        this.timeout = APP_CONFIG.API_TIMEOUT;
+        this.storage = new StorageService();
+    }
+
+    private async getHeaders(): Promise<Record<string, string>> {
+        const deviceConfig = this.storage.getDeviceConfig();
+
+        return {
+            'Content-Type': 'application/json',
+            'X-App-Version': APP_CONFIG.APP_VERSION,
+            ...(deviceConfig && {
+                'X-Device-Id': deviceConfig.deviceId,
+                'X-Device-Token': deviceConfig.deviceToken,
+                'X-Tenant-Id': deviceConfig.tenantId
+            })
+        };
+    }
+
+    private async handleResponse<T>(response: Response): Promise<ApiResponse<T>> {
+        if (!response.ok) {
+            const error = await response.json().catch(() => ({
+                code: 'UNKNOWN_ERROR',
+                message: 'An unexpected error occurred'
+            }));
+
+            return {
+                success: false,
+                error
+            };
+        }
+
+        const data = await response.json();
+        return {
+            success: true,
+            data
+        };
+    }
+
+    async get<T>(endpoint: string): Promise<ApiResponse<T>> {
+        try {
+            const response = await fetch(`${this.baseURL}${endpoint}`, {
+                method: 'GET',
+                headers: await this.getHeaders(),
+                signal: AbortSignal.timeout(this.timeout)
+            });
+
+            return this.handleResponse<T>(response);
+        } catch (error) {
+            return {
+                success: false,
+                error: {
+                    code: 'NETWORK_ERROR',
+                    message: error instanceof Error ? error.message : 'Network error'
+                }
+            };
+        }
+    }
+
+    async post<T>(endpoint: string, data?: unknown): Promise<ApiResponse<T>> {
+        try {
+            const response = await fetch(`${this.baseURL}${endpoint}`, {
+                method: 'POST',
+                headers: await this.getHeaders(),
+                body: data ? JSON.stringify(data) : undefined,
+                signal: AbortSignal.timeout(this.timeout)
+            });
+
+            return this.handleResponse<T>(response);
+        } catch (error) {
+            return {
+                success: false,
+                error: {
+                    code: 'NETWORK_ERROR',
+                    message: error instanceof Error ? error.message : 'Network error'
+                }
+            };
+        }
+    }
+}
+
+export const apiClient = new ApiClient();
\ No newline at end of file
Index: src/api/websocket.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/api/websocket.ts b/src/api/websocket.ts
new file mode 100644
--- /dev/null	(date 1748637148990)
+++ b/src/api/websocket.ts	(date 1748637148990)
@@ -0,0 +1,138 @@
+import { ENV } from '@config/environment';
+import { APP_CONFIG } from '@config/constants';
+import { DeviceConfig } from '../types/device.types';
+
+export type WebSocketMessage = {
+    type: string;
+    payload: any;
+};
+
+export class WebSocketClient {
+    private ws: WebSocket | null = null;
+    private reconnectAttempts = 0;
+    private heartbeatInterval: NodeJS.Timeout | null = null;
+    private reconnectTimeout: NodeJS.Timeout | null = null;
+    private listeners: Map<string, Set<(data: any) => void>> = new Map();
+    private deviceConfig: DeviceConfig | null = null;
+
+    connect(deviceConfig: DeviceConfig): void {
+        this.deviceConfig = deviceConfig;
+        this.establishConnection();
+    }
+
+    private establishConnection(): void {
+        if (this.ws?.readyState === WebSocket.OPEN) return;
+
+        const wsUrl = `${ENV.WS_BASE_URL}/ws/tablet/${this.deviceConfig?.deviceId}`;
+
+        this.ws = new WebSocket(wsUrl, {
+            headers: {
+                'X-Device-Token': this.deviceConfig?.deviceToken || '',
+                'X-Tenant-Id': this.deviceConfig?.tenantId || ''
+            }
+        } as any);
+
+        this.ws.onopen = this.handleOpen.bind(this);
+        this.ws.onmessage = this.handleMessage.bind(this);
+        this.ws.onclose = this.handleClose.bind(this);
+        this.ws.onerror = this.handleError.bind(this);
+    }
+
+    private handleOpen(): void {
+        console.log('WebSocket connected');
+        this.reconnectAttempts = 0;
+        this.startHeartbeat();
+        this.emit('connection', { status: 'connected' });
+    }
+
+    private handleMessage(event: MessageEvent): void {
+        try {
+            const message: WebSocketMessage = JSON.parse(event.data);
+            this.emit(message.type, message.payload);
+        } catch (error) {
+            console.error('Failed to parse WebSocket message:', error);
+        }
+    }
+
+    private handleClose(): void {
+        console.log('WebSocket disconnected');
+        this.stopHeartbeat();
+        this.emit('connection', { status: 'disconnected' });
+        this.scheduleReconnect();
+    }
+
+    private handleError(error: Event): void {
+        console.error('WebSocket error:', error);
+        this.emit('error', error);
+    }
+
+    private scheduleReconnect(): void {
+        if (this.reconnectAttempts >= APP_CONFIG.WS_MAX_RECONNECT_ATTEMPTS) {
+            console.error('Max reconnection attempts reached');
+            this.emit('connection', { status: 'failed' });
+            return;
+        }
+
+        this.reconnectAttempts++;
+        const delay = Math.min(
+            APP_CONFIG.WS_RECONNECT_INTERVAL * Math.pow(2, this.reconnectAttempts - 1),
+            30000
+        );
+
+        this.reconnectTimeout = setTimeout(() => {
+            console.log(`Reconnecting... (attempt ${this.reconnectAttempts})`);
+            this.establishConnection();
+        }, delay);
+    }
+
+    private startHeartbeat(): void {
+        this.heartbeatInterval = setInterval(() => {
+            if (this.ws?.readyState === WebSocket.OPEN) {
+                this.send('heartbeat', { timestamp: new Date().toISOString() });
+            }
+        }, APP_CONFIG.WS_HEARTBEAT_INTERVAL);
+    }
+
+    private stopHeartbeat(): void {
+        if (this.heartbeatInterval) {
+            clearInterval(this.heartbeatInterval);
+            this.heartbeatInterval = null;
+        }
+    }
+
+    send(type: string, payload: any): void {
+        if (this.ws?.readyState === WebSocket.OPEN) {
+            this.ws.send(JSON.stringify({ type, payload }));
+        } else {
+            console.warn('WebSocket is not connected');
+        }
+    }
+
+    on(event: string, callback: (data: any) => void): void {
+        if (!this.listeners.has(event)) {
+            this.listeners.set(event, new Set());
+        }
+        this.listeners.get(event)!.add(callback);
+    }
+
+    off(event: string, callback: (data: any) => void): void {
+        this.listeners.get(event)?.delete(callback);
+    }
+
+    private emit(event: string, data: any): void {
+        this.listeners.get(event)?.forEach(callback => callback(data));
+    }
+
+    disconnect(): void {
+        if (this.reconnectTimeout) {
+            clearTimeout(this.reconnectTimeout);
+        }
+        this.stopHeartbeat();
+        if (this.ws) {
+            this.ws.close();
+            this.ws = null;
+        }
+    }
+}
+
+export const wsClient = new WebSocketClient();
\ No newline at end of file
Index: src/hooks/useWakeLock.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/useWakeLock.ts b/src/hooks/useWakeLock.ts
new file mode 100644
--- /dev/null	(date 1748636469628)
+++ b/src/hooks/useWakeLock.ts	(date 1748636469628)
@@ -0,0 +1,42 @@
+import { useEffect, useRef } from 'react';
+
+export function useWakeLock() {
+    const wakeLockRef = useRef<WakeLockSentinel | null>(null);
+
+    const requestWakeLock = async () => {
+        try {
+            if ('wakeLock' in navigator) {
+                wakeLockRef.current = await navigator.wakeLock.request('screen');
+                console.log('Wake lock activated');
+            }
+        } catch (err) {
+            console.error('Wake lock error:', err);
+        }
+    };
+
+    const releaseWakeLock = () => {
+        if (wakeLockRef.current) {
+            wakeLockRef.current.release();
+            wakeLockRef.current = null;
+        }
+    };
+
+    useEffect(() => {
+        requestWakeLock();
+
+        const handleVisibilityChange = () => {
+            if (document.visibilityState === 'visible') {
+                requestWakeLock();
+            }
+        };
+
+        document.addEventListener('visibilitychange', handleVisibilityChange);
+
+        return () => {
+            document.removeEventListener('visibilitychange', handleVisibilityChange);
+            releaseWakeLock();
+        };
+    }, []);
+
+    return { requestWakeLock, releaseWakeLock };
+}
\ No newline at end of file
Index: src/hooks/useWebSocket.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/useWebSocket.ts b/src/hooks/useWebSocket.ts
new file mode 100644
--- /dev/null	(date 1748636459192)
+++ b/src/hooks/useWebSocket.ts	(date 1748636459192)
@@ -0,0 +1,33 @@
+import { useEffect, useCallback, useRef } from 'react';
+import { wsClient } from '../api/websocket';
+import { useDevice } from './useDevice';
+
+export function useWebSocket() {
+    const { deviceConfig } = useDevice();
+    const connectedRef = useRef(false);
+
+    useEffect(() => {
+        if (deviceConfig && !connectedRef.current) {
+            wsClient.connect(deviceConfig);
+            connectedRef.current = true;
+        }
+
+        return () => {
+            if (connectedRef.current) {
+                wsClient.disconnect();
+                connectedRef.current = false;
+            }
+        };
+    }, [deviceConfig]);
+
+    const on = useCallback((event: string, callback: (data: any) => void) => {
+        wsClient.on(event, callback);
+        return () => wsClient.off(event, callback);
+    }, []);
+
+    const send = useCallback((type: string, payload: any) => {
+        wsClient.send(type, payload);
+    }, []);
+
+    return { on, send };
+}
\ No newline at end of file
Index: src/hooks/usePWA.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/usePWA.ts b/src/hooks/usePWA.ts
new file mode 100644
--- /dev/null	(date 1748636479728)
+++ b/src/hooks/usePWA.ts	(date 1748636479728)
@@ -0,0 +1,48 @@
+import { useState, useEffect } from 'react';
+
+interface BeforeInstallPromptEvent extends Event {
+    prompt: () => Promise<void>;
+    userChoice: Promise<{ outcome: 'accepted' | 'dismissed' }>;
+}
+
+export function usePWA() {
+    const [isInstallable, setIsInstallable] = useState(false);
+    const [isPWA, setIsPWA] = useState(false);
+    const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
+
+    useEffect(() => {
+        // Check if running as PWA
+        const isStandalone = window.matchMedia('(display-mode: standalone)').matches
+            || (window.navigator as any).standalone
+            || document.referrer.includes('android-app://');
+
+        setIsPWA(isStandalone);
+
+        // Listen for install prompt
+        const handleBeforeInstallPrompt = (e: Event) => {
+            e.preventDefault();
+            setDeferredPrompt(e as BeforeInstallPromptEvent);
+            setIsInstallable(true);
+        };
+
+        window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
+
+        return () => {
+            window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
+        };
+    }, []);
+
+    const install = async () => {
+        if (!deferredPrompt) return false;
+
+        deferredPrompt.prompt();
+        const { outcome } = await deferredPrompt.userChoice;
+
+        setDeferredPrompt(null);
+        setIsInstallable(false);
+
+        return outcome === 'accepted';
+    };
+
+    return { isInstallable, isPWA, install };
+}
\ No newline at end of file
Index: src/hooks/useSignatureRequest.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/hooks/useSignatureRequest.ts b/src/hooks/useSignatureRequest.ts
new file mode 100644
--- /dev/null	(date 1748636084381)
+++ b/src/hooks/useSignatureRequest.ts	(date 1748636084381)
@@ -0,0 +1,1 @@
+
Index: src/components/Layout/Layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Layout.tsx b/src/components/Layout/Layout.tsx
new file mode 100644
--- /dev/null	(date 1748636844296)
+++ b/src/components/Layout/Layout.tsx	(date 1748636844296)
@@ -0,0 +1,20 @@
+import React from 'react';
+import StatusIndicator from '../StatusIndicator/StatusIndicator';
+import styles from 'Layout.module.css';
+
+interface LayoutProps {
+    children: React.ReactNode;
+}
+
+export default function Layout({ children }: LayoutProps) {
+    return (
+        <div className={styles.layout}>
+            <header className={styles.header}>
+                <StatusIndicator />
+            </header>
+            <main className={styles.main}>
+                {children}
+            </main>
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/Layout/Layout.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/Layout/Layout.module.css b/src/components/Layout/Layout.module.css
new file mode 100644
--- /dev/null	(date 1748636797936)
+++ b/src/components/Layout/Layout.module.css	(date 1748636797936)
@@ -0,0 +1,31 @@
+.layout {
+    display: flex;
+    flex-direction: column;
+    width: 100vw;
+    height: 100vh;
+    background: linear-gradient(135deg, var(--color-gray-50) 0%, var(--color-white) 100%);
+}
+
+.header {
+    position: fixed;
+    top: 0;
+    left: 0;
+    right: 0;
+    height: 80px;
+    background: rgba(255, 255, 255, 0.95);
+    backdrop-filter: blur(10px);
+    box-shadow: var(--shadow-sm);
+    z-index: var(--z-dropdown);
+    display: flex;
+    align-items: center;
+    padding: 0 var(--space-8);
+}
+
+.main {
+    flex: 1;
+    padding-top: 80px;
+    overflow: hidden;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+}
\ No newline at end of file
Index: src/components/SignaturePad/SignaturePad.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/SignaturePad/SignaturePad.module.css b/src/components/SignaturePad/SignaturePad.module.css
new file mode 100644
--- /dev/null	(date 1748636911580)
+++ b/src/components/SignaturePad/SignaturePad.module.css	(date 1748636911580)
@@ -0,0 +1,134 @@
+.container {
+    width: 100%;
+    height: 100%;
+    display: flex;
+    flex-direction: column;
+    background: var(--color-white);
+    animation: fadeIn var(--transition-fast);
+}
+
+.header {
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+    padding: var(--space-6) var(--space-8);
+    background: var(--color-gray-50);
+    border-bottom: 1px solid var(--color-gray-200);
+}
+
+.timer {
+    font-size: var(--text-lg);
+    font-weight: 500;
+    color: var(--color-gray-700);
+    padding: var(--space-2) var(--space-4);
+    background: var(--color-white);
+    border-radius: var(--radius-md);
+    box-shadow: var(--shadow-sm);
+    font-variant-numeric: tabular-nums;
+}
+
+.content {
+    flex: 1;
+    display: flex;
+    flex-direction: column;
+    padding: var(--space-8);
+    max-width: 1200px;
+    width: 100%;
+    margin: 0 auto;
+}
+
+.title {
+    font-size: var(--text-2xl);
+    color: var(--primary-color);
+    text-align: center;
+    margin-bottom: var(--space-6);
+}
+
+.canvasWrapper {
+    flex: 1;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    margin-bottom: var(--space-8);
+}
+
+.canvas {
+    position: relative;
+    width: 100%;
+    max-width: 800px;
+    background: var(--color-white);
+    border: 2px solid var(--color-gray-200);
+    border-radius: var(--radius-lg);
+    box-shadow: var(--shadow-lg);
+    padding: var(--space-4);
+}
+
+.signatureCanvas {
+    width: 100% !important;
+    height: 300px !important;
+    cursor: crosshair;
+}
+
+.signatureLine {
+    position: absolute;
+    bottom: 60px;
+    left: var(--space-8);
+    right: var(--space-8);
+    border-bottom: 2px solid var(--color-gray-300);
+    text-align: center;
+}
+
+.signatureLine span {
+    position: relative;
+    top: 10px;
+    background: var(--color-white);
+    padding: 0 var(--space-4);
+    color: var(--color-gray-500);
+    font-size: var(--text-sm);
+}
+
+.actions {
+    display: flex;
+    gap: var(--space-4);
+    justify-content: center;
+}
+
+.clearButton {
+    background: var(--color-gray-200);
+    color: var(--color-gray-700);
+    font-size: var(--text-lg);
+    font-weight: 500;
+    padding: var(--space-4) var(--space-8);
+    border: none;
+    border-radius: var(--radius-lg);
+    cursor: pointer;
+    transition: all var(--transition-base);
+}
+
+.clearButton:hover:not(:disabled) {
+    background: var(--color-gray-300);
+}
+
+.submitButton {
+    background: var(--secondary-color);
+    color: var(--color-white);
+    font-size: var(--text-lg);
+    font-weight: 600;
+    padding: var(--space-4) var(--space-10);
+    border: none;
+    border-radius: var(--radius-lg);
+    cursor: pointer;
+    transition: all var(--transition-base);
+    box-shadow: var(--shadow-md);
+}
+
+.submitButton:hover:not(:disabled) {
+    background: color-mix(in srgb, var(--secondary-color) 90%, black);
+    transform: translateY(-1px);
+    box-shadow: var(--shadow-lg);
+}
+
+.submitButton:disabled {
+    opacity: 0.5;
+    cursor: not-allowed;
+}
\ No newline at end of file
Index: tsconfig.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tsconfig.json b/tsconfig.json
new file mode 100644
--- /dev/null	(date 1748637009384)
+++ b/tsconfig.json	(date 1748637009384)
@@ -0,0 +1,38 @@
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "lib": [
+      "dom",
+      "dom.iterable",
+      "esnext"
+    ],
+    "allowJs": true,
+    "skipLibCheck": true,
+    "esModuleInterop": true,
+    "allowSyntheticDefaultImports": true,
+    "strict": true,
+    "forceConsistentCasingInFileNames": true,
+    "noFallthroughCasesInSwitch": true,
+    "module": "esnext",
+    "moduleResolution": "node",
+    "resolveJsonModule": true,
+    "isolatedModules": true,
+    "noEmit": true,
+    "jsx": "react-jsx",
+    "baseUrl": "src",
+    "paths": {
+      "@/*": ["*"],
+      "@components/*": ["components/*"],
+      "@hooks/*": ["hooks/*"],
+      "@services/*": ["services/*"],
+      "@types/*": ["types/*"],
+      "@utils/*": ["utils/*"],
+      "@api/*": ["api/*"],
+      "@contexts/*": ["contexts/*"],
+      "@config/*": ["config/*"]
+    }
+  },
+  "include": [
+    "src"
+  ]
+}
\ No newline at end of file
Index: src/components/SignaturePad/SignaturePad.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/SignaturePad/SignaturePad.tsx b/src/components/SignaturePad/SignaturePad.tsx
new file mode 100644
--- /dev/null	(date 1748636585985)
+++ b/src/components/SignaturePad/SignaturePad.tsx	(date 1748636585985)
@@ -0,0 +1,106 @@
+import React, { useState, useRef } from 'react';
+import SignatureCanvas from './SignatureCanvas';
+import CustomerInfo from '../CustomerInfo/CustomerInfo';
+import { SignatureRequest } from '../../types/signature.types';
+import { apiClient } from '../../api/client';
+import { APP_CONFIG } from '../../config/constants';
+import styles from './SignaturePad.module.css';
+
+interface SignaturePadProps {
+    request: SignatureRequest;
+    onComplete: () => void;
+    onCancel: () => void;
+}
+
+export default function SignaturePad({ request, onComplete, onCancel }: SignaturePadProps) {
+    const [isSubmitting, setIsSubmitting] = useState(false);
+    const [timeLeft, setTimeLeft] = useState(APP_CONFIG.SIGNATURE_TIMEOUT / 1000);
+    const canvasRef = useRef<any>(null);
+
+    React.useEffect(() => {
+        const timer = setInterval(() => {
+            setTimeLeft((prev) => {
+                if (prev <= 1) {
+                    clearInterval(timer);
+                    onCancel();
+                    return 0;
+                }
+                return prev - 1;
+            });
+        }, 1000);
+
+        return () => clearInterval(timer);
+    }, [onCancel]);
+
+    const handleSubmit = async () => {
+        if (!canvasRef.current || canvasRef.current.isEmpty()) {
+            alert('Proszę złożyć podpis');
+            return;
+        }
+
+        setIsSubmitting(true);
+
+        try {
+            const signatureImage = canvasRef.current.toDataURL('image/png');
+
+            const response = await apiClient.post('/api/signatures', {
+                sessionId: request.sessionId,
+                signatureImage,
+                signedAt: new Date().toISOString(),
+                deviceId: localStorage.getItem('deviceId')
+            });
+
+            if (response.success) {
+                onComplete();
+            } else {
+                alert('Błąd podczas zapisywania podpisu');
+            }
+        } catch (error) {
+            console.error('Error submitting signature:', error);
+            alert('Wystąpił błąd podczas przesyłania podpisu');
+        } finally {
+            setIsSubmitting(false);
+        }
+    };
+
+    const handleClear = () => {
+        canvasRef.current?.clear();
+    };
+
+    return (
+        <div className={styles.container}>
+            <div className={styles.header}>
+                <CustomerInfo request={request} />
+                <div className={styles.timer}>
+                    Pozostało: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
+                </div>
+            </div>
+
+            <div className={styles.content}>
+                <h2 className={styles.title}>Proszę złożyć podpis poniżej</h2>
+
+                <div className={styles.canvasWrapper}>
+                    <SignatureCanvas ref={canvasRef} />
+                </div>
+
+                <div className={styles.actions}>
+                    <button
+                        onClick={handleClear}
+                        className={styles.clearButton}
+                        disabled={isSubmitting}
+                    >
+                        Wyczyść
+                    </button>
+
+                    <button
+                        onClick={handleSubmit}
+                        className={styles.submitButton}
+                        disabled={isSubmitting}
+                    >
+                        {isSubmitting ? 'Wysyłanie...' : 'Zatwierdź podpis'}
+                    </button>
+                </div>
+            </div>
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/SignaturePad/SignatureCanvas.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/SignaturePad/SignatureCanvas.tsx b/src/components/SignaturePad/SignatureCanvas.tsx
new file mode 100644
--- /dev/null	(date 1748636594625)
+++ b/src/components/SignaturePad/SignatureCanvas.tsx	(date 1748636594625)
@@ -0,0 +1,36 @@
+import React, { forwardRef, useImperativeHandle, useRef } from 'react';
+import SignatureCanvasLib from 'react-signature-canvas';
+import styles from './SignaturePad.module.css';
+
+const SignatureCanvas = forwardRef((props, ref) => {
+    const canvasRef = useRef<SignatureCanvasLib>(null);
+
+    useImperativeHandle(ref, () => ({
+        clear: () => canvasRef.current?.clear(),
+        isEmpty: () => canvasRef.current?.isEmpty() || true,
+        toDataURL: (type?: string) => canvasRef.current?.toDataURL(type)
+    }));
+
+    return (
+        <div className={styles.canvas}>
+            <SignatureCanvasLib
+                ref={canvasRef}
+                canvasProps={{
+                    className: styles.signatureCanvas
+                }}
+                backgroundColor="white"
+                penColor="#1a1a1a"
+                minWidth={1}
+                maxWidth={3}
+                velocityFilterWeight={0.7}
+            />
+            <div className={styles.signatureLine}>
+                <span>Podpis klienta</span>
+            </div>
+        </div>
+    );
+});
+
+SignatureCanvas.displayName = 'SignatureCanvas';
+
+export default SignatureCanvas;
\ No newline at end of file
Index: src/components/IdleScreen/IdleScreen.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/IdleScreen/IdleScreen.module.css b/src/components/IdleScreen/IdleScreen.module.css
new file mode 100644
--- /dev/null	(date 1748636870974)
+++ b/src/components/IdleScreen/IdleScreen.module.css	(date 1748636870974)
@@ -0,0 +1,83 @@
+.container {
+    width: 100%;
+    height: 100%;
+    display: flex;
+    flex-direction: column;
+    align-items: center;
+    justify-content: center;
+    padding: var(--space-8);
+    text-align: center;
+    animation: fadeIn var(--transition-slow);
+}
+
+.content {
+    max-width: 600px;
+    width: 100%;
+}
+
+.logo {
+    height: 120px;
+    width: auto;
+    margin: 0 auto var(--space-8);
+    object-fit: contain;
+}
+
+.companyName {
+    font-size: var(--text-4xl);
+    font-weight: 700;
+    color: var(--primary-color);
+    margin-bottom: var(--space-8);
+    letter-spacing: -0.03em;
+}
+
+.clock {
+    font-size: var(--text-5xl);
+    font-weight: 300;
+    color: var(--color-gray-700);
+    margin-bottom: var(--space-6);
+    font-variant-numeric: tabular-nums;
+}
+
+.status {
+    font-size: var(--text-xl);
+    color: var(--color-gray-600);
+    margin-bottom: var(--space-12);
+}
+
+.deviceInfo {
+    font-size: var(--text-sm);
+    color: var(--color-gray-500);
+    padding: var(--space-2) var(--space-4);
+    background: var(--color-gray-100);
+    border-radius: var(--radius-full);
+    display: inline-block;
+}
+
+.installPrompt {
+    position: fixed;
+    bottom: var(--space-8);
+    left: 50%;
+    transform: translateX(-50%);
+    background: var(--color-white);
+    padding: var(--space-4) var(--space-6);
+    border-radius: var(--radius-xl);
+    box-shadow: var(--shadow-lg);
+    display: flex;
+    align-items: center;
+    gap: var(--space-4);
+    animation: slideIn var(--transition-slow);
+}
+
+.installButton {
+    background: var(--secondary-color);
+    color: var(--color-white);
+    border: none;
+    padding: var(--space-2) var(--space-4);
+    border-radius: var(--radius-md);
+    font-weight: 500;
+    cursor: pointer;
+}
+
+.installButton:hover {
+    background: color-mix(in srgb, var(--secondary-color) 90%, black);
+}
\ No newline at end of file
Index: src/components/IdleScreen/IdleScreen.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/IdleScreen/IdleScreen.tsx b/src/components/IdleScreen/IdleScreen.tsx
new file mode 100644
--- /dev/null	(date 1748636544601)
+++ b/src/components/IdleScreen/IdleScreen.tsx	(date 1748636544601)
@@ -0,0 +1,70 @@
+import React, { useEffect, useState } from 'react';
+import { useDevice } from '../../hooks/useDevice';
+import styles from './IdleScreen.module.css';
+
+interface IdleScreenProps {
+    isInstallable: boolean;
+    onInstall: () => Promise<boolean>;
+}
+
+export default function IdleScreen({ isInstallable, onInstall }: IdleScreenProps) {
+    const { deviceConfig, tenantBranding } = useDevice();
+    const [currentTime, setCurrentTime] = useState(new Date());
+
+    useEffect(() => {
+        const timer = setInterval(() => {
+            setCurrentTime(new Date());
+        }, 1000);
+
+        return () => clearInterval(timer);
+    }, []);
+
+    const handleInstall = async () => {
+        const success = await onInstall();
+        if (success) {
+            console.log('App installed successfully');
+        }
+    };
+
+    return (
+        <div className={styles.container}>
+            <div className={styles.content}>
+                {tenantBranding?.logoUrl && (
+                    <img
+                        src={tenantBranding.logoUrl}
+                        alt={tenantBranding.companyName}
+                        className={styles.logo}
+                    />
+                )}
+
+                <h1 className={styles.companyName}>
+                    {tenantBranding?.companyName || 'Premium Auto Detailing'}
+                </h1>
+
+                <div className={styles.clock}>
+                    {currentTime.toLocaleTimeString('pl-PL', {
+                        hour: '2-digit',
+                        minute: '2-digit'
+                    })}
+                </div>
+
+                <p className={styles.status}>
+                    Gotowy do przyjęcia podpisu
+                </p>
+
+                <div className={styles.deviceInfo}>
+                    {deviceConfig?.friendlyName}
+                </div>
+            </div>
+
+            {isInstallable && (
+                <div className={styles.installPrompt}>
+                    <p>Zainstaluj aplikację dla lepszego doświadczenia</p>
+                    <button onClick={handleInstall} className={styles.installButton}>
+                        Zainstaluj
+                    </button>
+                </div>
+            )}
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/PairingScreen/PairingScreen.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/PairingScreen/PairingScreen.tsx b/src/components/PairingScreen/PairingScreen.tsx
new file mode 100644
--- /dev/null	(date 1748636557898)
+++ b/src/components/PairingScreen/PairingScreen.tsx	(date 1748636557898)
@@ -0,0 +1,73 @@
+import React, { useState } from 'react';
+import { apiClient } from '../../api/client';
+import { useDevice } from '../../hooks/useDevice';
+import styles from './PairingScreen.module.css';
+
+export default function PairingScreen() {
+    const [pairingCode, setPairingCode] = useState('');
+    const [isLoading, setIsLoading] = useState(false);
+    const [error, setError] = useState('');
+    const { pairDevice } = useDevice();
+
+    const handleSubmit = async (e: React.FormEvent) => {
+        e.preventDefault();
+        setError('');
+        setIsLoading(true);
+
+        try {
+            const response = await apiClient.post<any>('/api/tablets/pair', {
+                code: pairingCode,
+                deviceName: `Tablet ${new Date().toLocaleDateString()}`
+            });
+
+            if (response.success && response.data) {
+                await pairDevice(response.data);
+            } else {
+                setError(response.error?.message || 'Nieprawidłowy kod parowania');
+            }
+        } catch (err) {
+            setError('Wystąpił błąd podczas parowania');
+        } finally {
+            setIsLoading(false);
+        }
+    };
+
+    return (
+        <div className={styles.container}>
+            <div className={styles.card}>
+                <h1 className={styles.title}>Parowanie tabletu</h1>
+
+                <p className={styles.description}>
+                    Wprowadź 6-cyfrowy kod parowania wygenerowany w systemie CRM
+                </p>
+
+                <form onSubmit={handleSubmit} className={styles.form}>
+                    <input
+                        type="text"
+                        value={pairingCode}
+                        onChange={(e) => setPairingCode(e.target.value.replace(/\D/g, '').slice(0, 6))}
+                        placeholder="000000"
+                        className={styles.input}
+                        maxLength={6}
+                        autoComplete="off"
+                        disabled={isLoading}
+                    />
+
+                    {error && (
+                        <div className={styles.error}>
+                            {error}
+                        </div>
+                    )}
+
+                    <button
+                        type="submit"
+                        disabled={pairingCode.length !== 6 || isLoading}
+                        className={styles.button}
+                    >
+                        {isLoading ? 'Parowanie...' : 'Sparuj tablet'}
+                    </button>
+                </form>
+            </div>
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/PairingScreen/PairingScreen.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/PairingScreen/PairingScreen.module.css b/src/components/PairingScreen/PairingScreen.module.css
new file mode 100644
--- /dev/null	(date 1748636888158)
+++ b/src/components/PairingScreen/PairingScreen.module.css	(date 1748636888158)
@@ -0,0 +1,87 @@
+.container {
+    width: 100%;
+    height: 100%;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    padding: var(--space-8);
+}
+
+.card {
+    background: var(--color-white);
+    padding: var(--space-12);
+    border-radius: var(--radius-2xl);
+    box-shadow: var(--shadow-xl);
+    max-width: 500px;
+    width: 100%;
+    animation: fadeIn var(--transition-slow);
+}
+
+.title {
+    font-size: var(--text-3xl);
+    color: var(--primary-color);
+    margin-bottom: var(--space-4);
+    text-align: center;
+}
+
+.description {
+    font-size: var(--text-lg);
+    color: var(--color-gray-600);
+    text-align: center;
+    margin-bottom: var(--space-8);
+}
+
+.form {
+    display: flex;
+    flex-direction: column;
+    gap: var(--space-4);
+}
+
+.input {
+    font-size: var(--text-3xl);
+    font-weight: 600;
+    text-align: center;
+    padding: var(--space-4);
+    border: 2px solid var(--color-gray-200);
+    border-radius: var(--radius-lg);
+    letter-spacing: 0.5em;
+    font-variant-numeric: tabular-nums;
+    transition: all var(--transition-base);
+}
+
+.input:focus {
+    border-color: var(--secondary-color);
+    box-shadow: 0 0 0 3px color-mix(in srgb, var(--secondary-color) 20%, transparent);
+}
+
+.error {
+    color: var(--color-error);
+    font-size: var(--text-sm);
+    text-align: center;
+    padding: var(--space-2);
+    background: color-mix(in srgb, var(--color-error) 10%, transparent);
+    border-radius: var(--radius-md);
+}
+
+.button {
+    background: var(--primary-color);
+    color: var(--color-white);
+    font-size: var(--text-xl);
+    font-weight: 600;
+    padding: var(--space-4) var(--space-6);
+    border: none;
+    border-radius: var(--radius-lg);
+    cursor: pointer;
+    transition: all var(--transition-base);
+}
+
+.button:hover:not(:disabled) {
+    background: color-mix(in srgb, var(--primary-color) 90%, black);
+    transform: translateY(-1px);
+    box-shadow: var(--shadow-lg);
+}
+
+.button:disabled {
+    opacity: 0.5;
+    cursor: not-allowed;
+}
\ No newline at end of file
Index: src/components/CustomerInfo/CustomerInfo.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/CustomerInfo/CustomerInfo.module.css b/src/components/CustomerInfo/CustomerInfo.module.css
new file mode 100644
--- /dev/null	(date 1748636926269)
+++ b/src/components/CustomerInfo/CustomerInfo.module.css	(date 1748636926269)
@@ -0,0 +1,48 @@
+.container {
+    display: flex;
+    gap: var(--space-8);
+    flex-wrap: wrap;
+}
+
+.section {
+    min-width: 200px;
+}
+
+.sectionTitle {
+    font-size: var(--text-sm);
+    font-weight: 500;
+    color: var(--color-gray-500);
+    text-transform: uppercase;
+    letter-spacing: 0.05em;
+    margin-bottom: var(--space-1);
+}
+
+.customerName {
+    font-size: var(--text-xl);
+    font-weight: 600;
+    color: var(--primary-color);
+}
+
+.vehicleInfo {
+    display: flex;
+    flex-direction: column;
+    gap: var(--space-1);
+}
+
+.vehicleMake {
+    font-size: var(--text-lg);
+    font-weight: 600;
+    color: var(--primary-color);
+}
+
+.vehiclePlate {
+    font-size: var(--text-base);
+    color: var(--color-gray-600);
+    font-family: var(--font-mono);
+}
+
+.serviceType {
+    font-size: var(--text-lg);
+    color: var(--primary-color);
+    font-weight: 500;
+}
\ No newline at end of file
Index: src/components/CustomerInfo/CustomerInfo.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/CustomerInfo/CustomerInfo.tsx b/src/components/CustomerInfo/CustomerInfo.tsx
new file mode 100644
--- /dev/null	(date 1748636607980)
+++ b/src/components/CustomerInfo/CustomerInfo.tsx	(date 1748636607980)
@@ -0,0 +1,35 @@
+import React from 'react';
+import { SignatureRequest } from '../../types/signature.types';
+import styles from './CustomerInfo.module.css';
+
+interface CustomerInfoProps {
+    request: SignatureRequest;
+}
+
+export default function CustomerInfo({ request }: CustomerInfoProps) {
+    return (
+        <div className={styles.container}>
+            <div className={styles.section}>
+                <h3 className={styles.sectionTitle}>Dane klienta</h3>
+                <p className={styles.customerName}>{request.customerName}</p>
+            </div>
+
+            <div className={styles.section}>
+                <h3 className={styles.sectionTitle}>Pojazd</h3>
+                <div className={styles.vehicleInfo}>
+                    <p className={styles.vehicleMake}>
+                        {request.vehicleInfo.make} {request.vehicleInfo.model}
+                    </p>
+                    <p className={styles.vehiclePlate}>
+                        {request.vehicleInfo.licensePlate}
+                    </p>
+                </div>
+            </div>
+
+            <div className={styles.section}>
+                <h3 className={styles.sectionTitle}>Usługa</h3>
+                <p className={styles.serviceType}>{request.serviceType}</p>
+            </div>
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/StatusIndicator/StatusIndicator.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/StatusIndicator/StatusIndicator.tsx b/src/components/StatusIndicator/StatusIndicator.tsx
new file mode 100644
--- /dev/null	(date 1748636620436)
+++ b/src/components/StatusIndicator/StatusIndicator.tsx	(date 1748636620436)
@@ -0,0 +1,46 @@
+import React, { useState, useEffect } from 'react';
+import { useDevice } from '../../hooks/useDevice';
+import { useWebSocket } from '../../hooks/useWebSocket';
+import { DeviceStatus } from '../../types/device.types';
+import styles from './StatusIndicator.module.css';
+
+export default function StatusIndicator() {
+    const { deviceStatus, tenantBranding } = useDevice();
+    const [connectionStatus, setConnectionStatus] = useState<'connected' | 'disconnected'>('disconnected');
+    const { on } = useWebSocket();
+
+    useEffect(() => {
+        const unsubscribe = on('connection', ({ status }) => {
+            setConnectionStatus(status);
+        });
+
+        return unsubscribe;
+    }, [on]);
+
+    const getStatusColor = () => {
+        if (connectionStatus === 'connected') return styles.connected;
+        if (deviceStatus === DeviceStatus.ERROR) return styles.error;
+        return styles.disconnected;
+    };
+
+    return (
+        <div className={styles.container}>
+            <div className={styles.brand}>
+                {tenantBranding?.logoUrl && (
+                    <img
+                        src={tenantBranding.logoUrl}
+                        alt={tenantBranding.companyName}
+                        className={styles.logo}
+                    />
+                )}
+            </div>
+
+            <div className={styles.status}>
+                <div className={`${styles.indicator} ${getStatusColor()}`} />
+                <span className={styles.text}>
+          {connectionStatus === 'connected' ? 'Połączono' : 'Rozłączono'}
+        </span>
+            </div>
+        </div>
+    );
+}
\ No newline at end of file
Index: src/components/StatusIndicator/StatusIndicator.module.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/components/StatusIndicator/StatusIndicator.module.css b/src/components/StatusIndicator/StatusIndicator.module.css
new file mode 100644
--- /dev/null	(date 1748636938679)
+++ b/src/components/StatusIndicator/StatusIndicator.module.css	(date 1748636938679)
@@ -0,0 +1,53 @@
+.container {
+    width: 100%;
+    display: flex;
+    justify-content: space-between;
+    align-items: center;
+}
+
+.brand {
+    display: flex;
+    align-items: center;
+}
+
+.logo {
+    height: 50px;
+    width: auto;
+    object-fit: contain;
+}
+
+.status {
+    display: flex;
+    align-items: center;
+    gap: var(--space-2);
+    padding: var(--space-2) var(--space-4);
+    background: var(--color-gray-50);
+    border-radius: var(--radius-full);
+}
+
+.indicator {
+    width: 12px;
+    height: 12px;
+    border-radius: var(--radius-full);
+    transition: all var(--transition-base);
+}
+
+.indicator.connected {
+    background: var(--color-success);
+    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-success) 20%, transparent);
+}
+
+.indicator.disconnected {
+    background: var(--color-gray-400);
+}
+
+.indicator.error {
+    background: var(--color-error);
+    box-shadow: 0 0 0 3px color-mix(in srgb, var(--color-error) 20%, transparent);
+}
+
+.text {
+    font-size: var(--text-sm);
+    font-weight: 500;
+    color: var(--color-gray-700);
+}
\ No newline at end of file
Index: src/types/device.types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/device.types.ts b/src/types/device.types.ts
new file mode 100644
--- /dev/null	(date 1748637332943)
+++ b/src/types/device.types.ts	(date 1748637332943)
@@ -0,0 +1,24 @@
+export interface DeviceConfig {
+    deviceId: string;
+    deviceToken: string;
+    tenantId: string;
+    locationId: string;
+    friendlyName: string;
+    workstationId?: string;
+}
+
+export interface TenantBranding {
+    primaryColor: string;
+    secondaryColor: string;
+    logoUrl: string;
+    companyName: string;
+    welcomeMessage?: string;
+}
+
+export enum DeviceStatus {
+    DISCONNECTED = 'DISCONNECTED',
+    CONNECTING = 'CONNECTING',
+    CONNECTED = 'CONNECTED',
+    PAIRED = 'PAIRED',
+    ERROR = 'ERROR'
+}
\ No newline at end of file
Index: src/types/api.types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/api.types.ts b/src/types/api.types.ts
new file mode 100644
--- /dev/null	(date 1748637332940)
+++ b/src/types/api.types.ts	(date 1748637332940)
@@ -0,0 +1,15 @@
+export interface ApiResponse<T> {
+    success: boolean;
+    data?: T;
+    error?: {
+        code: string;
+        message: string;
+    };
+}
+
+export interface PaginatedResponse<T> {
+    items: T[];
+    total: number;
+    page: number;
+    pageSize: number;
+}
\ No newline at end of file
Index: src/types/signature.types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/types/signature.types.ts b/src/types/signature.types.ts
new file mode 100644
--- /dev/null	(date 1748636292457)
+++ b/src/types/signature.types.ts	(date 1748636292457)
@@ -0,0 +1,22 @@
+export interface SignatureRequest {
+    sessionId: string;
+    customerId: string;
+    customerName: string;
+    vehicleInfo: {
+        make: string;
+        model: string;
+        licensePlate: string;
+        vin?: string;
+    };
+    serviceType: string;
+    documentId: string;
+    documentType: string;
+    timestamp: string;
+}
+
+export interface SignatureData {
+    sessionId: string;
+    signatureImage: string; // base64
+    signedAt: string;
+    deviceId: string;
+}
\ No newline at end of file
Index: src/services/storage.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/services/storage.service.ts b/src/services/storage.service.ts
new file mode 100644
--- /dev/null	(date 1748636428580)
+++ b/src/services/storage.service.ts	(date 1748636428580)
@@ -0,0 +1,60 @@
+import { DeviceConfig, TenantBranding } from '../types/device.types';
+import { APP_CONFIG } from '../config/constants';
+
+export class StorageService {
+    private storage: Storage;
+
+    constructor() {
+        this.storage = window.localStorage;
+    }
+
+    // Device config
+    saveDeviceConfig(config: DeviceConfig): void {
+        this.storage.setItem(
+            APP_CONFIG.STORAGE_KEYS.DEVICE_CONFIG,
+            JSON.stringify(config)
+        );
+    }
+
+    getDeviceConfig(): DeviceConfig | null {
+        const data = this.storage.getItem(APP_CONFIG.STORAGE_KEYS.DEVICE_CONFIG);
+        return data ? JSON.parse(data) : null;
+    }
+
+    clearDeviceConfig(): void {
+        this.storage.removeItem(APP_CONFIG.STORAGE_KEYS.DEVICE_CONFIG);
+    }
+
+    // Tenant branding
+    saveTenantBranding(branding: TenantBranding): void {
+        this.storage.setItem(
+            APP_CONFIG.STORAGE_KEYS.TENANT_BRANDING,
+            JSON.stringify(branding)
+        );
+    }
+
+    getTenantBranding(): TenantBranding | null {
+        const data = this.storage.getItem(APP_CONFIG.STORAGE_KEYS.TENANT_BRANDING);
+        return data ? JSON.parse(data) : null;
+    }
+
+    // Last sync
+    updateLastSync(): void {
+        this.storage.setItem(
+            APP_CONFIG.STORAGE_KEYS.LAST_SYNC,
+            new Date().toISOString()
+        );
+    }
+
+    getLastSync(): Date | null {
+        const data = this.storage.getItem(APP_CONFIG.STORAGE_KEYS.LAST_SYNC);
+        return data ? new Date(data) : null;
+    }
+
+    // Clear all
+    clearAll(): void {
+        Object.values(APP_CONFIG.STORAGE_KEYS).forEach(key => {
+            this.storage.removeItem(key);
+        });
+    }
+}
\ No newline at end of file
Index: src/contexts/DeviceContext.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/contexts/DeviceContext.tsx b/src/contexts/DeviceContext.tsx
new file mode 100644
--- /dev/null	(date 1748637332947)
+++ b/src/contexts/DeviceContext.tsx	(date 1748637332947)
@@ -0,0 +1,85 @@
+import React, { createContext, useContext, useState, useEffect } from 'react';
+import { StorageService } from '@services/storage.service';
+import { apiClient } from '@api/client';
+import {DeviceConfig, DeviceStatus, TenantBranding} from "../types/device.types";
+
+interface DeviceContextValue {
+    deviceConfig: DeviceConfig | null;
+    deviceStatus: DeviceStatus;
+    tenantBranding: TenantBranding | null;
+    pairDevice: (config: DeviceConfig) => Promise<void>;
+    unpairDevice: () => void;
+}
+
+const DeviceContext = createContext<DeviceContextValue | null>(null);
+
+export function DeviceProvider({ children }: { children: React.ReactNode }) {
+    const [deviceConfig, setDeviceConfig] = useState<DeviceConfig | null>(null);
+    const [deviceStatus, setDeviceStatus] = useState<DeviceStatus>(DeviceStatus.DISCONNECTED);
+    const [tenantBranding, setTenantBranding] = useState<TenantBranding | null>(null);
+
+    const storage = new StorageService();
+
+    useEffect(() => {
+        // Load saved config
+        const savedConfig = storage.getDeviceConfig();
+        const savedBranding = storage.getTenantBranding();
+
+        if (savedConfig) {
+            setDeviceConfig(savedConfig);
+            setDeviceStatus(DeviceStatus.PAIRED);
+        }
+
+        if (savedBranding) {
+            setTenantBranding(savedBranding);
+        }
+    }, []);
+
+    const pairDevice = async (config: DeviceConfig) => {
+        storage.saveDeviceConfig(config);
+        setDeviceConfig(config);
+        setDeviceStatus(DeviceStatus.PAIRED);
+
+        // Fetch tenant branding
+        const brandingResponse = await apiClient.get<TenantBranding>(
+            `/api/tenants/${config.tenantId}/branding`
+        );
+
+        if (brandingResponse.success && brandingResponse.data) {
+            storage.saveTenantBranding(brandingResponse.data);
+            setTenantBranding(brandingResponse.data);
+
+            // Apply branding to CSS variables
+            const root = document.documentElement;
+            root.style.setProperty('--primary-color', brandingResponse.data.primaryColor);
+            root.style.setProperty('--secondary-color', brandingResponse.data.secondaryColor);
+        }
+    };
+
+    const unpairDevice = () => {
+        storage.clearAll();
+        setDeviceConfig(null);
+        setDeviceStatus(DeviceStatus.DISCONNECTED);
+        setTenantBranding(null);
+    };
+
+    return (
+        <DeviceContext.Provider value={{
+            deviceConfig,
+            deviceStatus,
+            tenantBranding,
+            pairDevice,
+            unpairDevice
+        }}>
+            {children}
+        </DeviceContext.Provider>
+    );
+}
+
+export function useDevice() {
+    const context = useContext(DeviceContext);
+    if (!context) {
+        throw new Error('useDevice must be used within DeviceProvider');
+    }
+    return context;
+}
\ No newline at end of file
Index: src/styles/globals.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/styles/globals.css b/src/styles/globals.css
new file mode 100644
--- /dev/null	(date 1748636755182)
+++ b/src/styles/globals.css	(date 1748636755182)
@@ -0,0 +1,67 @@
+* {
+    box-sizing: border-box;
+    margin: 0;
+    padding: 0;
+}
+
+html {
+    font-size: 16px;
+    -webkit-font-smoothing: antialiased;
+    -moz-osx-font-smoothing: grayscale;
+    text-rendering: optimizeLegibility;
+}
+
+body {
+    font-family: var(--font-sans);
+    font-size: var(--text-base);
+    line-height: 1.5;
+    color: var(--color-gray-900);
+    background-color: var(--color-white);
+    overflow: hidden;
+    touch-action: manipulation;
+    user-select: none;
+    -webkit-user-select: none;
+}
+
+#root {
+    width: 100vw;
+    height: 100vh;
+    overflow: hidden;
+}
+
+/* Premium feel typography */
+h1, h2, h3, h4, h5, h6 {
+    font-weight: 600;
+    line-height: 1.2;
+    letter-spacing: -0.02em;
+}
+
+/* Smooth transitions globally */
+button, a, input, textarea {
+    transition: all var(--transition-base);
+}
+
+/* Focus styles */
+:focus-visible {
+    outline: 2px solid var(--secondary-color);
+    outline-offset: 2px;
+}
+
+/* Scrollbar styling */
+::-webkit-scrollbar {
+    width: 8px;
+    height: 8px;
+}
+
+::-webkit-scrollbar-track {
+    background: var(--color-gray-100);
+}
+
+::-webkit-scrollbar-thumb {
+    background: var(--color-gray-400);
+    border-radius: var(--radius-full);
+}
+
+::-webkit-scrollbar-thumb:hover {
+    background: var(--color-gray-500);
+}
\ No newline at end of file
Index: src/styles/variables.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/styles/variables.css b/src/styles/variables.css
new file mode 100644
--- /dev/null	(date 1748636727738)
+++ b/src/styles/variables.css	(date 1748636727738)
@@ -0,0 +1,80 @@
+:root {
+    /* Brand Colors - will be overridden by tenant branding */
+    --primary-color: #1a1a1a;
+    --secondary-color: #0066ff;
+    --accent-color: #ffd700;
+
+    /* Neutral Colors */
+    --color-white: #ffffff;
+    --color-black: #000000;
+    --color-gray-50: #f9fafb;
+    --color-gray-100: #f3f4f6;
+    --color-gray-200: #e5e7eb;
+    --color-gray-300: #d1d5db;
+    --color-gray-400: #9ca3af;
+    --color-gray-500: #6b7280;
+    --color-gray-600: #4b5563;
+    --color-gray-700: #374151;
+    --color-gray-800: #1f2937;
+    --color-gray-900: #111827;
+
+    /* Semantic Colors */
+    --color-success: #10b981;
+    --color-warning: #f59e0b;
+    --color-error: #ef4444;
+    --color-info: #3b82f6;
+
+    /* Typography */
+    --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
+    --font-mono: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', monospace;
+
+    /* Font Sizes */
+    --text-xs: 0.75rem;
+    --text-sm: 0.875rem;
+    --text-base: 1rem;
+    --text-lg: 1.125rem;
+    --text-xl: 1.25rem;
+    --text-2xl: 1.5rem;
+    --text-3xl: 1.875rem;
+    --text-4xl: 2.25rem;
+    --text-5xl: 3rem;
+
+    /* Spacing */
+    --space-1: 0.25rem;
+    --space-2: 0.5rem;
+    --space-3: 0.75rem;
+    --space-4: 1rem;
+    --space-5: 1.25rem;
+    --space-6: 1.5rem;
+    --space-8: 2rem;
+    --space-10: 2.5rem;
+    --space-12: 3rem;
+    --space-16: 4rem;
+    --space-20: 5rem;
+
+    /* Border Radius */
+    --radius-sm: 0.375rem;
+    --radius-md: 0.5rem;
+    --radius-lg: 0.75rem;
+    --radius-xl: 1rem;
+    --radius-2xl: 1.5rem;
+    --radius-full: 9999px;
+
+    /* Shadows */
+    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
+    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
+    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
+    --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
+    --shadow-2xl: 0 25px 50px -12px rgb(0 0 0 / 0.25);
+
+    /* Transitions */
+    --transition-fast: 150ms cubic-bezier(0.4, 0, 0.2, 1);
+    --transition-base: 200ms cubic-bezier(0.4, 0, 0.2, 1);
+    --transition-slow: 300ms cubic-bezier(0.4, 0, 0.2, 1);
+
+    /* Z-index */
+    --z-dropdown: 10;
+    --z-modal: 50;
+    --z-popover: 60;
+    --z-tooltip: 70;
+}
\ No newline at end of file
Index: src/styles/animations.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/styles/animations.css b/src/styles/animations.css
new file mode 100644
--- /dev/null	(date 1748636779096)
+++ b/src/styles/animations.css	(date 1748636779096)
@@ -0,0 +1,59 @@
+@keyframes fadeIn {
+    from {
+        opacity: 0;
+        transform: translateY(10px);
+    }
+    to {
+        opacity: 1;
+        transform: translateY(0);
+    }
+}
+
+@keyframes slideIn {
+    from {
+        transform: translateX(-100%);
+    }
+    to {
+        transform: translateX(0);
+    }
+}
+
+@keyframes pulse {
+    0%, 100% {
+        opacity: 1;
+    }
+    50% {
+        opacity: 0.5;
+    }
+}
+
+@keyframes shimmer {
+    0% {
+        background-position: -200% 0;
+    }
+    100% {
+        background-position: 200% 0;
+    }
+}
+
+@keyframes spin {
+    from {
+        transform: rotate(0deg);
+    }
+    to {
+        transform: rotate(360deg);
+    }
+}
+
+/* Utility classes */
+.fade-in {
+    animation: fadeIn var(--transition-slow) ease-out;
+}
+
+.slide-in {
+    animation: slideIn var(--transition-slow) ease-out;
+}
+
+.pulse {
+    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
+}
Index: public/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/manifest.json b/public/manifest.json
new file mode 100644
--- /dev/null	(date 1748636962984)
+++ b/public/manifest.json	(date 1748636962984)
@@ -0,0 +1,26 @@
+{
+  "name": "Premium Auto Detailing - Signature Pad",
+  "short_name": "Signature Pad",
+  "description": "Professional signature collection for premium auto detailing services",
+  "start_url": "/",
+  "display": "standalone",
+  "orientation": "landscape",
+  "theme_color": "#1a1a1a",
+  "background_color": "#ffffff",
+  "icons": [
+    {
+      "src": "/icons/icon-192.png",
+      "sizes": "192x192",
+      "type": "image/png",
+      "purpose": "any maskable"
+    },
+    {
+      "src": "/icons/icon-512.png",
+      "sizes": "512x512",
+      "type": "image/png",
+      "purpose": "any maskable"
+    }
+  ],
+  "permissions": ["notifications"],
+  "categories": ["business", "productivity"]
+}
\ No newline at end of file
Index: public/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/index.html b/public/index.html
new file mode 100644
--- /dev/null	(date 1748637043027)
+++ b/public/index.html	(date 1748637043027)
@@ -0,0 +1,127 @@
+<!DOCTYPE html>
+<html lang="pl">
+<head>
+    <meta charset="utf-8" />
+    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
+    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
+    <meta name="theme-color" content="#1a1a1a" />
+    <meta name="description" content="Premium Auto Detailing - Professional Signature Collection" />
+
+    <!-- Apple specific -->
+    <meta name="apple-mobile-web-app-capable" content="yes" />
+    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
+    <meta name="apple-mobile-web-app-title" content="Signature Pad" />
+    <link rel="apple-touch-icon" href="%PUBLIC_URL%/icons/icon-192.png" />
+
+    <!-- Android specific -->
+    <meta name="mobile-web-app-capable" content="yes" />
+
+    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
+
+    <title>Premium Auto Detailing - Signature Pad</title>
+
+    <!-- Premium fonts -->
+    <link rel="preconnect" href="https://fonts.googleapis.com">
+    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
+    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
+
+    <style>
+        /* Critical CSS for immediate rendering */
+        body {
+            margin: 0;
+            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
+            -webkit-font-smoothing: antialiased;
+            -moz-osx-font-smoothing: grayscale;
+            background: #ffffff;
+            overflow: hidden;
+            touch-action: manipulation;
+        }
+
+        #root {
+            width: 100vw;
+            height: 100vh;
+            display: flex;
+            align-items: center;
+            justify-content: center;
+        }
+
+        /* Loading animation */
+        .app-loader {
+            text-align: center;
+        }
+
+        .app-loader-spinner {
+            width: 50px;
+            height: 50px;
+            border: 3px solid #f3f3f3;
+            border-top: 3px solid #1a1a1a;
+            border-radius: 50%;
+            animation: spin 1s linear infinite;
+            margin: 0 auto 20px;
+        }
+
+        @keyframes spin {
+            0% { transform: rotate(0deg); }
+            100% { transform: rotate(360deg); }
+        }
+
+        .app-loader-text {
+            color: #666;
+            font-size: 16px;
+        }
+
+        /* Prevent pull-to-refresh on mobile */
+        body {
+            overscroll-behavior-y: contain;
+        }
+    </style>
+</head>
+<body>
+<noscript>You need to enable JavaScript to run this app.</noscript>
+<div id="root">
+    <div class="app-loader">
+        <div class="app-loader-spinner"></div>
+        <div class="app-loader-text">Ładowanie aplikacji...</div>
+    </div>
+</div>
+
+<script>
+    // Register service worker
+    if ('serviceWorker' in navigator) {
+        window.addEventListener('load', () => {
+            navigator.serviceWorker.register('%PUBLIC_URL%/service-worker.js')
+                .then(registration => {
+                    console.log('ServiceWorker registered:', registration.scope);
+
+                    // Handle updates
+                    registration.addEventListener('updatefound', () => {
+                        const newWorker = registration.installing;
+                        newWorker.addEventListener('statechange', () => {
+                            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
+                                // New content available, refresh needed
+                                if (confirm('Dostępna jest nowa wersja aplikacji. Odświeżyć?')) {
+                                    window.location.reload();
+                                }
+                            }
+                        });
+                    });
+                })
+                .catch(error => {
+                    console.error('ServiceWorker registration failed:', error);
+                });
+        });
+    }
+
+    // Prevent zooming on iOS
+    document.addEventListener('gesturestart', function(e) {
+        e.preventDefault();
+    });
+
+    // Prevent context menu on long press
+    document.addEventListener('contextmenu', function(e) {
+        e.preventDefault();
+        return false;
+    });
+</script>
+</body>
+</html>
\ No newline at end of file
Index: public/service-worker.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/service-worker.js b/public/service-worker.js
new file mode 100644
--- /dev/null	(date 1748637074944)
+++ b/public/service-worker.js	(date 1748637074944)
@@ -0,0 +1,120 @@
+const CACHE_NAME = 'signature-pad-v1';
+const urlsToCache = [
+    '/',
+    '/static/css/main.css',
+    '/static/js/main.js',
+    '/manifest.json',
+    '/icons/icon-192.png',
+    '/icons/icon-512.png',
+    '/sounds/notification.mp3'
+];
+
+// Install event - cache resources
+self.addEventListener('install', event => {
+    event.waitUntil(
+        caches.open(CACHE_NAME)
+            .then(cache => {
+                console.log('Opened cache');
+                return cache.addAll(urlsToCache);
+            })
+            .then(() => self.skipWaiting())
+    );
+});
+
+// Activate event - clean up old caches
+self.addEventListener('activate', event => {
+    event.waitUntil(
+        caches.keys().then(cacheNames => {
+            return Promise.all(
+                cacheNames.map(cacheName => {
+                    if (cacheName !== CACHE_NAME) {
+                        console.log('Deleting old cache:', cacheName);
+                        return caches.delete(cacheName);
+                    }
+                })
+            );
+        }).then(() => self.clients.claim())
+    );
+});
+
+// Fetch event - serve from cache, fallback to network
+self.addEventListener('fetch', event => {
+    event.respondWith(
+        caches.match(event.request)
+            .then(response => {
+                // Cache hit - return response
+                if (response) {
+                    return response;
+                }
+
+                // Clone the request
+                const fetchRequest = event.request.clone();
+
+                return fetch(fetchRequest).then(response => {
+                    // Check if valid response
+                    if (!response || response.status !== 200 || response.type !== 'basic') {
+                        return response;
+                    }
+
+                    // Clone the response
+                    const responseToCache = response.clone();
+
+                    // Don't cache API calls
+                    if (!event.request.url.includes('/api/')) {
+                        caches.open(CACHE_NAME)
+                            .then(cache => {
+                                cache.put(event.request, responseToCache);
+                            });
+                    }
+
+                    return response;
+                });
+            })
+            .catch(() => {
+                // Offline fallback
+                if (event.request.destination === 'document') {
+                    return caches.match('/');
+                }
+            })
+    );
+});
+
+// Handle background sync for offline signatures
+self.addEventListener('sync', event => {
+    if (event.tag === 'sync-signatures') {
+        event.waitUntil(syncSignatures());
+    }
+});
+
+async function syncSignatures() {
+    // Get pending signatures from IndexedDB
+    const pendingSignatures = await getPendingSignatures();
+
+    for (const signature of pendingSignatures) {
+        try {
+            const response = await fetch('/api/signatures', {
+                method: 'POST',
+                headers: {
+                    'Content-Type': 'application/json',
+                },
+                body: JSON.stringify(signature)
+            });
+
+            if (response.ok) {
+                await removePendingSignature(signature.id);
+            }
+        } catch (error) {
+            console.error('Failed to sync signature:', error);
+        }
+    }
+}
+
+// Placeholder functions for IndexedDB operations
+async function getPendingSignatures() {
+    // Implementation would retrieve from IndexedDB
+    return [];
+}
+
+async function removePendingSignature(id) {
+    // Implementation would remove from IndexedDB
+}
\ No newline at end of file
diff --git a/src/index.tsx b/src/index.tsx
new file mode 100644
diff --git a/src/api/endpoints/signature.ts b/src/api/endpoints/signature.ts
new file mode 100644
diff --git a/src/api/endpoints/device.ts b/src/api/endpoints/device.ts
new file mode 100644
diff --git a/src/api/endpoints/config.ts b/src/api/endpoints/config.ts
new file mode 100644
diff --git a/src/hooks/useDevice.ts b/src/hooks/useDevice.ts
new file mode 100644
